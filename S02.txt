#################################################
Ex 01: coder avec if/else + goto

int main() {
  int n = 5;
  int factorielle = 0;
  int valeur = n;
  factorielle = valeur;
  debut:
    if (valeur>1) {
    factorielle = factorielle*(valeur-1);
    valeur = valeur-1;
    goto debut;}
    else {
    goto fin;
    }
  fin:
  printf ("La factorielle de %d est égale à %d",n,factorielle);
}

#################################################
Ex 02: coder avec la boucle for

int main() {
  int n = 5;
  int factorielle = 0;
  factorielle = n;
  int valeur =n;
  for (int compteur = 0; compteur < n-1 ; compteur = compteur +1) {
    factorielle = factorielle*(valeur-1);
    valeur=valeur -1;}
  printf ("La factorielle de %d est égale à %d",n,factorielle);
}

####################################################################
Ex 03: coder avec une fonction

int factorielle (int n){
  int factorielle = n;
  int valeur =n;
  for (int compteur = 0; compteur < n-1 ; compteur = compteur +1) {
    factorielle = factorielle*(valeur-1);
    valeur=valeur-1;}
    return factorielle;
}
int main() {
  int n = 5;
  printf ("La factorielle de %d est égale à %d",n,factorielle(n));
}

#######################################################################
Ex 04: coder avec une fonction récursive

int factorielle (int n){
  if (n>1){
     return n*factorielle(n-1);}
}
int main() {
  int n = 5;
  printf ("La factorielle de %d est égale à %d",n,factorielle(n));
}

#######################################################################
Ex 05: limite de la fonction récursive

Si on rappelle la fonction trop souvent, on risque un débordement de la pile, soit un Stackoverflow.

#######################################################################
Ex 06: coder des fonctions type map

#define N 5
void mapDouble (int e[], int r[]){
  for (int i=0 ; i<N; i++){
    r[i]=e[i]*2;
  }
  }
void mapTriple (int e[], int r[]){
  for (int i=0 ; i<N; i++){
    r[i]=e[i]*3;
  }
  }
void mapSquare (int e[], int r[]){
  for (int i=0 ; i<N; i++){
    r[i]=e[i]*e[i];
  }
  }
void mapMaximize3 (int e[], int r[]){
  for (int i=0 ; i<N; i++){
    if(e[i]<3){
      r[i]=e[i];}
      else {
      r[i]=3;}
  }
  }
;
int main() {
  int e[N] = {1, 5, 2, 4, 3};
  int r_double[N];
  mapDouble (e, r_double);
  int r_triple[N];
  mapTriple (e, r_triple);
  int r_square[N];
  mapSquare (e, r_square);
  int maximize3[N];
  mapMaximize3 (e, maximize3);
};
