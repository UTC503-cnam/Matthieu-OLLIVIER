#################################################
Ex 01: coder avec if/else + goto

int main() {
  int n = 5;
  int factorielle = n;
  int valeur = n;
  debut:
    if (valeur>1) {
    factorielle = factorielle*(valeur-1);
    valeur--;
    goto debut;}
    else {
    goto fin;
    }
  fin:
  printf ("La factorielle de %d est egale a %d",n,factorielle);
}

#################################################
Ex 02: coder avec la boucle for

{
  int n = 5;
  int factorielle = n;
   for (int i = 1; i < n ; i++) {
    factorielle = factorielle*(i);
    }
  printf ("La factorielle de %d est egale a %d",n,factorielle);
}


####################################################################
Ex 03: coder avec une fonction

int factorielle (int n)
{
  int calcul = n;
  for (int i = 1; i < n ; i++) {
    calcul = calcul*(i);
    }
  return calcul;
}
int main() 
{
  int n = 5;
  printf ("La factorielle de %d est egale a %d",n,factorielle(n));
}

#######################################################################
Ex 04: coder avec une fonction récursive

int factorielle (int n){
  if (n>1){
     return n*factorielle(n-1);}
}
int main() {
  int n = 5;
  printf ("La factorielle de %d est égale à %d",n,factorielle(n));
}

#######################################################################
Ex 05: limite de la fonction récursive

Si on rappelle la fonction trop souvent, on risque un débordement de la pile, soit un Stackoverflow.

#######################################################################
Ex 06: coder des fonctions type map

#define N 5
void mapDouble (int e[], int r[]){
  for (int i=0 ; i<N; i++){
    r[i]=e[i]*2;
  }
  }
void mapTriple (int e[], int r[]){
  for (int i=0 ; i<N; i++){
    r[i]=e[i]*3;
  }
  }
void mapSquare (int e[], int r[]){
  for (int i=0 ; i<N; i++){
    r[i]=e[i]*e[i];
  }
  }
void mapMaximize3 (int e[], int r[]){
  for (int i=0 ; i<N; i++){
    if(e[i]<3){
      r[i]=e[i];}
      else {
      r[i]=3;}
  }
  }
;
int main() {
  int e[N] = {1, 5, 2, 4, 3};
  int r_double[N];
  mapDouble (e, r_double);
  int r_triple[N];
  mapTriple (e, r_triple);
  int r_square[N];
  mapSquare (e, r_square);
  int maximize3[N];
  mapMaximize3 (e, maximize3);
};

#######################################################################
Ex 07: coder des fonctions type map (utilisation de switch case)

#define N 5

void calcul (int e[], int r[], int type)
{
  for (int i=0 ; i<N; i++){
    switch(type){
    case 1: // double
    r[i]=e[i]*2;
    break;
    case 2: //triple
    r[i]=e[i]*3;
    break;
    case 3: //square
    r[i]=e[i]*e[i];
    break;
    case 4: // maximize
    if(e[i]<3){
      r[i]=e[i];}
      else {
      r[i]=3;}
    break;
    }
  }
}
;
int main(int argc, char *argv[]) 
{
  int e[N] = {1, 5, 2, 4, 3};
  int r_double[N];
  calcul (e, r_double, 1);
  int r_triple[N];
  calcul (e, r_triple, 2);
  int r_square[N];
  calcul (e, r_square, 3);
  int maximize3[N];
  calcul (e, maximize3, 4);
};

#######################################################################
Ex 08: Analyse coder

Le code 2 et le code 3 ne peuvent pas fonctionner.
Il y a un switch(figure) avec case:TRIANGLE et case:ETOILE
hors, figure est une variable de type int.

#######################################################################
Ex 09: pour le fun

to star
  repeat 5 [ fd 100 rt 144 ]
  pu
  fd 120
  pd
end
clearscreen
right 90
repeat 5 [star]
